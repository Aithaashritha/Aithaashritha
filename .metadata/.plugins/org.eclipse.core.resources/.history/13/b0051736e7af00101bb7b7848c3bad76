package com.example.convergenceintegration.service;

import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;
import com.example.convergenceintegration.entity.DataTransfer;
import com.example.convergenceintegration.repository.DataTransferRepository;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class DataTransferService {

    private final DataTransferRepository repo;

    public List<DataTransfer> getAllTransfers() {
        return repo.findAll();
    }

    public DataTransfer getTransferById(Long id) {
        return repo.findById(id)
                   .orElseThrow(() -> new RuntimeException("Transfer not found"));
    }

    public DataTransfer createTransfer(DataTransfer dataTransfer) {
        dataTransfer.setTimestamp(LocalDateTime.now());
        return repo.save(dataTransfer);
    }

    public DataTransfer updateTransfer(Long id, DataTransfer dataTransfer) {
        DataTransfer existing = repo.findById(id)
                                    .orElseThrow(() -> new RuntimeException("Transfer not found"));
        existing.setSourceSystem(dataTransfer.getSourceSystem());
        existing.setTargetSystem(dataTransfer.getTargetSystem());
        existing.setType(dataTransfer.getType());
        existing.setStatus(dataTransfer.getStatus());
        existing.setTimestamp(LocalDateTime.now());
        return repo.save(existing);
    }

    public void deleteTransfer(Long id) {
        repo.deleteById(id);
    }

    public DataTransfer initiateTransfer(String source, String target, String type) {
        DataTransfer transfer = new DataTransfer();
        transfer.setSourceSystem(source);
        transfer.setTargetSystem(target);
        transfer.setType(type);
        transfer.setStatus("INITIATED");
        transfer.setTimestamp(LocalDateTime.now());
        return repo.save(transfer);
    }
}
